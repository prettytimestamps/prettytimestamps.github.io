{"version":3,"sources":["page/SelectTimeZone.tsx","page/TimeDisplay.tsx","page/App.tsx","index.tsx"],"names":["allNames","moment","tz","names","suggestions","Array","from","Set","map","x","zoneAbbr","concat","SelectTimeZone","tzs","addTZ","currentInput","setCurrentInput","useState","suggestionSet","useMemo","filter","indexOf","style","width","TextInput","icon","AddCircle","dropHeight","focusIndicator","onChange","e","currentTarget","value","onSuggestionSelect","suggestion","length","TimeDisplay","time","DataTable","columns","property","header","Text","primary","render","d","parseInt","format","fontFamily","data","AppBar","props","Box","tag","direction","align","justify","background","pad","left","right","vertical","elevation","zIndex","theme","global","font","family","size","height","colors","focus","App","stamp","setStamp","useQueryParam","StringParam","setTZs","withDefault","ArrayParam","guess","useCallback","target","Grommet","flex","overflow","horizontal","max","Clock","defaultValue","undefined","placeholder","ReactDOM","StrictMode","ReactRouterRoute","Route","document","getElementById"],"mappings":"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","file":"static/js/main.6f791e3a.chunk.js","sourcesContent":["import { TextInput } from \"grommet\";\nimport { AddCircle } from \"grommet-icons\";\n\nimport moment from \"moment-timezone\";\nimport { useMemo, useState } from \"react\";\n\nconst allNames = moment.tz.names();\nconst allAbbr = Array.from(\n  new Set(moment.tz.names().map((x) => moment.tz(x).zoneAbbr()))\n);\n\nconst suggestions = allAbbr.concat(allNames);\n\ninterface SelectTimeZoneParams {\n  tzs: Array<String>;\n  addTZ: (tz: string) => void;\n}\n\nexport const SelectTimeZone: React.FunctionComponent<SelectTimeZoneParams> = ({\n  tzs,\n  addTZ,\n}) => {\n  const [currentInput, setCurrentInput] = useState(\"\");\n  const suggestionSet = useMemo(\n    () => suggestions.filter((x) => x.indexOf(currentInput) >= 0),\n    [currentInput]\n  );\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <TextInput\n        icon={<AddCircle />}\n        dropHeight=\"small\"\n        focusIndicator={false}\n        key={`select_${tzs.length}`}\n        suggestions={suggestionSet}\n        onChange={(e) => setCurrentInput(e.currentTarget.value)}\n        onSuggestionSelect={(e) => {\n          addTZ(e.suggestion);\n        }}\n      />\n    </div>\n  );\n};\n","import moment from \"moment-timezone\";\nimport { DataTable, Text } from \"grommet\";\n\ninterface TimeDisplayProps {\n  time: string | null;\n  tzs: string[];\n}\n\nexport const TimeDisplay = ({ time, tzs }: TimeDisplayProps) => {\n  return (\n    <>\n      <DataTable\n        columns={[\n          {\n            property: \"name\",\n            header: <Text>Name</Text>,\n            primary: true,\n            render: (d) => d,\n          },\n          {\n            property: \"offset\",\n            header: \"Offset\",\n            render: (d) =>\n              time == null\n                ? \"???\"\n                : moment(parseInt(time, 10)).tz(d).format(\"z\"),\n          },\n          {\n            property: \"time\",\n            header: \"Time\",\n            render: (d) => (\n              <span style={{ fontFamily: \"'Roboto Mono', monospace\" }}>\n                {time\n                  ? moment(parseInt(time, 10))\n                      .tz(d)\n                      .format(\"YYYY-MM-DD HH:mm:ss\")\n                  : \"0000-00-00 00:00:00\"}\n              </span>\n            ),\n          },\n        ]}\n        data={tzs}\n      />\n    </>\n  );\n};\n","import { Box, Grommet, TextInput } from \"grommet\";\nimport { Clock } from \"grommet-icons\";\nimport moment from \"moment\";\nimport { useCallback } from \"react\";\nimport {\n  useQueryParam,\n  StringParam,\n  withDefault,\n  ArrayParam,\n} from \"use-query-params\";\nimport { SelectTimeZone } from \"./SelectTimeZone\";\nimport { TimeDisplay } from \"./TimeDisplay\";\n\nconst AppBar = (props: any) => (\n  <Box\n    tag=\"header\"\n    direction=\"row\"\n    align=\"center\"\n    justify=\"between\"\n    background=\"brand\"\n    pad={{ left: \"medium\", right: \"small\", vertical: \"small\" }}\n    elevation=\"medium\"\n    style={{ zIndex: \"1\" }}\n    {...props}\n  />\n);\n\nconst theme = {\n  global: {\n    font: {\n      family: \"Roboto\",\n      size: \"18px\",\n      height: \"20px\",\n    },\n    colors: {\n      focus: \"#0CA7D3\",\n    },\n  },\n};\n\nfunction App() {\n  const [stamp, setStamp] = useQueryParam(\"t\", StringParam);\n  const [tzs, setTZs] = useQueryParam(\n    \"z\",\n    withDefault(ArrayParam, [\"UTC\", moment.tz.guess()])\n  );\n\n  const onChange = useCallback(\n    (e) => {\n      setStamp(e.target.value);\n    },\n    [setStamp]\n  );\n\n  return (\n    <Grommet theme={theme}>\n      <AppBar>Pretty Timestamp</AppBar>\n      <Box pad=\"small\" direction=\"row\" flex overflow={{ horizontal: \"hidden\" }}>\n        <Box flex align=\"center\" justify=\"center\">\n          <Box flex direction=\"row\">\n            <Box width={{ max: \"medium\" }} pad=\"small\">\n              <TextInput\n                icon={<Clock />}\n                defaultValue={stamp ?? undefined}\n                onChange={onChange}\n                placeholder=\"timestamp...\"\n              />\n            </Box>\n            <Box width={{ max: \"medium\" }} pad=\"small\">\n              <SelectTimeZone\n                tzs={tzs as string[]}\n                addTZ={(tz) => setTZs([...tzs, tz])}\n              ></SelectTimeZone>\n            </Box>\n          </Box>\n          <TimeDisplay time={stamp ?? null} tzs={tzs as string[]} />\n        </Box>\n      </Box>\n    </Grommet>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./page/App\";\nimport { QueryParamProvider } from \"use-query-params\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <QueryParamProvider ReactRouterRoute={Route}>\n        <App />\n      </QueryParamProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}