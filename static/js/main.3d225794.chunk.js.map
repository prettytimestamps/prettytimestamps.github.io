{"version":3,"sources":["page/SelectTimeZone.tsx","services/fuzzyMatch.ts","page/Input.tsx","page/TimeDisplay.tsx","page/App.tsx","services/guessTimestampForm.ts","index.tsx"],"names":["SelectTimeZone","tzs","addTZ","currentInput","setCurrentInput","useState","suggestionSet","useMemo","fuzzyMatch","search","moment","tz","names","filter","x","toUpperCase","indexOf","style","width","TextInput","icon","AddCircle","dropHeight","focusIndicator","suggestions","onChange","e","currentTarget","value","onSuggestionSelect","suggestion","length","CalculatorButton","props","Button","size","borderRadius","margin","padding","Inputs","guessedTime","stamp","setStamp","setTZs","useCallback","target","Box","flex","direction","max","pad","Text","type","Clock","defaultValue","undefined","placeholder","Array","from","Set","label","onClick","copy","unix","toString","time","add","subtract","TimeDisplay","sortedTZs","sort","a","b","utcOffset","DataTable","columns","property","header","render","d","Close","color","item","primary","format","fontFamily","data","AppBar","tag","align","justify","background","left","right","vertical","elevation","zIndex","theme","global","font","family","height","colors","focus","App","useQueryParam","StringParam","withDefault","ArrayParam","guess","timestamp","parsedStamp","parseInt","options","bestOption","now","forEach","option","index","timeToBest","Math","abs","diff","guessTimeStampForm","Grommet","secondary","Github","href","overflow","horizontal","ReactDOM","StrictMode","ReactRouterRoute","Route","document","getElementById"],"mappings":"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","file":"static/js/main.3d225794.chunk.js","sourcesContent":["import { TextInput } from \"grommet\";\nimport { AddCircle } from \"grommet-icons\";\n\nimport moment from \"moment-timezone\";\nimport { useMemo, useState } from \"react\";\nimport { fuzzyMatch } from \"../services/fuzzyMatch\";\n\ninterface SelectTimeZoneParams {\n  tzs: Array<String>;\n  addTZ: (tz: string) => void;\n}\n\nexport const SelectTimeZone: React.FunctionComponent<SelectTimeZoneParams> = ({\n  tzs,\n  addTZ,\n}) => {\n  const [currentInput, setCurrentInput] = useState(\"\");\n  const suggestionSet = useMemo(\n    () => fuzzyMatch(currentInput, moment.tz.names()),\n    [currentInput]\n  );\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <TextInput\n        icon={<AddCircle />}\n        dropHeight=\"small\"\n        focusIndicator={false}\n        key={`select_${tzs.length}`}\n        suggestions={suggestionSet}\n        onChange={(e) => setCurrentInput(e.currentTarget.value)}\n        onSuggestionSelect={(e) => {\n          addTZ(e.suggestion);\n        }}\n      />\n    </div>\n  );\n};\n","export function fuzzyMatch(search: string, options: string[]): string[] {\n  return options.filter(\n    (x) => x.toUpperCase().indexOf(search.toUpperCase()) >= 0\n  );\n}\n","import { Box, TextInput, Text, Button, ButtonType } from \"grommet\";\nimport { useCallback } from \"react\";\nimport { Guess } from \"../services/guessTimestampForm\";\nimport { SelectTimeZone } from \"./SelectTimeZone\";\nimport { Clock } from \"grommet-icons\";\nimport moment from \"moment-timezone\";\nimport copy from \"copy-to-clipboard\";\n\ninterface InputsProps {\n  guessedTime: Guess | null;\n  stamp: string | null;\n  setStamp: (newStamp: string) => void;\n  tzs: string[];\n  setTZs: (newTzs: string[]) => void;\n}\n\nconst CalculatorButton = (props: ButtonType) => (\n  <Button\n    size=\"small\"\n    style={{ borderRadius: 5, margin: \"0 .25em\", padding: \".25em .75em\" }}\n    {...props}\n  />\n);\n\nexport const Inputs: React.FunctionComponent<InputsProps> = ({\n  guessedTime,\n  stamp,\n  setStamp,\n  tzs,\n  setTZs,\n}) => {\n  const onChange = useCallback(\n    (e) => {\n      setStamp(e.target.value);\n    },\n    [setStamp]\n  );\n\n  return (\n    <>\n      <Box flex direction=\"row\">\n        <Box width={{ max: \"medium\" }} pad=\"small\">\n          <TextInput\n            key={stamp}\n            icon={guessedTime ? <Text>{guessedTime.type}</Text> : <Clock />}\n            defaultValue={stamp ?? undefined}\n            onChange={onChange}\n            placeholder=\"timestamp...\"\n          />\n        </Box>\n        <Box width={{ max: \"medium\" }} pad=\"small\">\n          <SelectTimeZone\n            tzs={tzs as string[]}\n            addTZ={(tz) => {\n              setTZs(Array.from(new Set([...tzs, tz])));\n            }}\n          ></SelectTimeZone>\n        </Box>\n      </Box>\n\n      <Box direction=\"row\">\n        <CalculatorButton label=\"COPY\" onClick={() => copy(stamp!)} />\n        <CalculatorButton\n          label=\"NOW\"\n          onClick={() => setStamp(moment().unix().toString())}\n        />\n        <CalculatorButton\n          label=\"+1H\"\n          onClick={() =>\n            guessedTime &&\n            setStamp(guessedTime.time.add(1, \"hour\").unix().toString())\n          }\n        />\n        <CalculatorButton\n          label=\"-1H\"\n          onClick={() =>\n            guessedTime &&\n            setStamp(\n              guessedTime.time.subtract(1, \"hour\").unix().toString().toString()\n            )\n          }\n        />\n        <CalculatorButton\n          label=\"+1M\"\n          onClick={() =>\n            guessedTime &&\n            setStamp(guessedTime.time.add(1, \"minute\").unix().toString())\n          }\n        />\n        <CalculatorButton\n          label=\"-1M\"\n          onClick={() =>\n            guessedTime &&\n            setStamp(guessedTime.time.subtract(1, \"minute\").unix().toString())\n          }\n        />\n        <CalculatorButton\n          label=\"+1S\"\n          onClick={() =>\n            guessedTime &&\n            setStamp(guessedTime.time.add(1, \"second\").unix().toString())\n          }\n        />\n        <CalculatorButton\n          label=\"-1S\"\n          onClick={() =>\n            guessedTime &&\n            setStamp(guessedTime.time.subtract(1, \"second\").unix().toString())\n          }\n        />\n      </Box>\n    </>\n  );\n};\n","import moment from \"moment-timezone\";\nimport { DataTable, Text } from \"grommet\";\nimport { useMemo } from \"react\";\nimport { Guess } from \"../services/guessTimestampForm\";\nimport { Close } from \"grommet-icons\";\n\ninterface TimeDisplayProps {\n  guessedTime: Guess | null;\n  tzs: string[];\n  setTZs: (newTzs: string[]) => void;\n}\n\nexport const TimeDisplay = ({ guessedTime, tzs, setTZs }: TimeDisplayProps) => {\n  const sortedTZs = useMemo(\n    () =>\n      tzs.sort(\n        (a, b) =>\n          moment(guessedTime?.time).tz(a).utcOffset() -\n          moment(guessedTime?.time).tz(b).utcOffset()\n      ),\n    [tzs, guessedTime]\n  );\n\n  return (\n    <>\n      <DataTable\n        columns={[\n          {\n            property: \"deleteButton\",\n            header: \"\",\n            render: (d) => {\n              return (\n                <Close\n                  size=\"16px\"\n                  color=\"red\"\n                  onClick={(e) => {\n                    setTZs(sortedTZs.filter((item) => item !== d));\n                  }}\n                />\n              );\n            },\n          },\n          {\n            property: \"name\",\n            header: <Text>Name</Text>,\n            primary: true,\n            render: (d) => d,\n          },\n          {\n            property: \"offset\",\n            header: \"Offset\",\n            render: (d) =>\n              guessedTime == null ? \"???\" : guessedTime.time.tz(d).format(\"Z\"),\n          },\n          {\n            property: \"time\",\n            header: \"Time\",\n            render: (d) => (\n              <span style={{ fontFamily: \"'Roboto Mono', monospace\" }}>\n                {guessedTime\n                  ? guessedTime.time.tz(d).format(\"YYYY-MM-DD HH:mm:ss\")\n                  : \"0000-00-00 00:00:00\"}\n              </span>\n            ),\n          },\n        ]}\n        data={sortedTZs}\n      />\n    </>\n  );\n};\n","import { Box, Grommet, Button } from \"grommet\";\nimport { Github } from \"grommet-icons\";\nimport moment from \"moment\";\nimport { useMemo } from \"react\";\nimport {\n  useQueryParam,\n  StringParam,\n  withDefault,\n  ArrayParam,\n} from \"use-query-params\";\nimport { guessTimeStampForm } from \"../services/guessTimestampForm\";\nimport { Inputs } from \"./Input\";\nimport { TimeDisplay } from \"./TimeDisplay\";\n\nconst AppBar = (props: any) => (\n  <Box\n    tag=\"header\"\n    direction=\"row\"\n    align=\"center\"\n    justify=\"between\"\n    background=\"brand\"\n    pad={{ left: \"medium\", right: \"small\", vertical: \"small\" }}\n    elevation=\"medium\"\n    style={{ zIndex: \"1\" }}\n    {...props}\n  />\n);\n\nconst theme = {\n  global: {\n    font: {\n      family: \"Roboto\",\n      size: \"18px\",\n      height: \"20px\",\n    },\n    colors: {\n      focus: \"#0CA7D3\",\n    },\n  },\n};\n\nfunction App() {\n  const [stamp, setStamp] = useQueryParam(\"t\", StringParam);\n  const [tzs, setTZs] = useQueryParam(\n    \"z\",\n    withDefault(ArrayParam, [\"UTC\", moment.tz.guess()])\n  );\n\n  const guessedTime = useMemo(\n    () => (stamp ? guessTimeStampForm(stamp) : null),\n    [stamp]\n  );\n\n  return (\n    <Grommet theme={theme}>\n      <AppBar>\n        <Box>Pretty Timestamp</Box>\n        <Box>\n          <Button\n            secondary\n            icon={<Github />}\n            target=\"blank\"\n            href=\"https://github.com/prettytimestamps/prettytimestamps.github.io/\"\n            label=\"GitHub\"\n          />\n        </Box>\n      </AppBar>\n      <Box pad=\"small\" direction=\"row\" flex overflow={{ horizontal: \"hidden\" }}>\n        <Box flex align=\"center\" justify=\"center\">\n          <Inputs\n            guessedTime={guessedTime}\n            stamp={stamp || null}\n            setStamp={setStamp}\n            tzs={tzs as string[]}\n            setTZs={setTZs}\n          />\n          <TimeDisplay\n            guessedTime={guessedTime}\n            tzs={tzs as string[]}\n            setTZs={setTZs}\n          />\n        </Box>\n      </Box>\n    </Grommet>\n  );\n}\n\nexport default App;\n","import moment from \"moment-timezone\";\n\nexport interface Guess {\n  type: string;\n  time: moment.Moment;\n}\n\nexport const guessTimeStampForm = (timestamp: string) => {\n  const parsedStamp = parseInt(timestamp, 10);\n  const options = [\n    { type: \"s\", time: moment(parsedStamp * 1000) },\n    { type: \"ms\", time: moment(parsedStamp) },\n    { type: \"ns\", time: moment(parsedStamp / 1000000) },\n  ];\n\n  let bestOption = options[0];\n  const now = moment();\n  options.forEach((option, index) => {\n    if (index === 0) return;\n\n    const timeToBest = Math.abs(now.diff(bestOption.time));\n    const timeToOption = Math.abs(now.diff(option.time));\n\n    if (timeToOption < timeToBest) {\n      bestOption = option;\n    }\n  });\n  return bestOption;\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./page/App\";\nimport { QueryParamProvider } from \"use-query-params\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <QueryParamProvider ReactRouterRoute={Route}>\n        <App />\n      </QueryParamProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}