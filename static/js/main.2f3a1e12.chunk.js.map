{"version":3,"sources":["page/SelectTimeZone.tsx","page/TimeDisplay.tsx","page/App.tsx","index.tsx"],"names":["allNames","moment","tz","names","allAbbr","Array","from","Set","map","x","zoneAbbr","suggestions","concat","value","label","SelectTimeZone","tzs","addTZ","style","width","options","onChange","e","length","TimeDisplay","time","displayList","guess","setTZs","useQueryParam","withDefault","ArrayParam","DataTable","columns","property","header","Text","primary","render","d","parseInt","format","fontFamily","data","AppBar","props","Box","tag","direction","align","justify","background","pad","left","right","vertical","elevation","zIndex","theme","global","font","family","size","height","colors","focus","App","stamp","setStamp","StringParam","useCallback","target","Grommet","flex","overflow","horizontal","max","TextInput","icon","Clock","defaultValue","undefined","placeholder","ReactDOM","StrictMode","ReactRouterRoute","Route","document","getElementById"],"mappings":"6PAIA,MAAMA,EAAWC,IAAOC,GAAGC,QACrBC,EAAUC,MAAMC,KACpB,IAAIC,IAAIN,IAAOC,GAAGC,QAAQK,KAAKC,GAAMR,IAAOC,GAAGO,GAAGC,eAG9CC,EAAcX,EAASY,OAAOR,GAASI,KAAKC,IAAD,CAC/CI,MAAOJ,EACPK,MAAOL,MAQIM,EAAgE,EAC3EC,MACAC,WAGE,qBAAKC,MAAO,CAAEC,MAAO,QAArB,SACE,cAAC,IAAD,CAEEC,QAAST,EACTU,SAAWC,IACTL,EAAK,OAACK,QAAD,IAACA,OAAD,EAACA,EAAGT,SAHL,UAASG,EAAIO,YCjBdC,EAAc,EAAGC,WAC5B,IAAIC,EAAc,CAAC,MAAOzB,IAAOC,GAAGyB,SACpC,MAAOX,EAAKY,GAAUC,YAAc,IAAKC,YAAYC,IAAY,KAEjE,OACE,qCACE,cAAChB,EAAD,CACEC,IAAKA,EACLC,MAAQf,GAAO0B,EAAO,IAAIZ,EAAKd,MAEjC,cAAC8B,EAAA,EAAD,CACEC,QAAS,CACP,CACEC,SAAU,OACVC,OAAQ,cAACC,EAAA,EAAD,mBACRC,SAAS,EACTC,OAASC,GAAMA,GAEjB,CACEL,SAAU,SACVC,OAAQ,SACRG,OAASC,GACC,MAARd,EACI,MACAxB,IAAOuC,SAASf,EAAM,KAAKvB,GAAGqC,GAAGE,OAAO,MAEhD,CACEP,SAAU,OACVC,OAAQ,OACRG,OAASC,GACP,sBAAMrB,MAAO,CAAEwB,WAAY,4BAA3B,SACGjB,EACGxB,IAAOuC,SAASf,EAAM,KACnBvB,GAAGqC,GACHE,OAAO,uBACV,0BAKZE,KAAMjB,EAAYd,OAAOI,SC3C3B4B,EAAUC,GACd,cAACC,EAAA,EAAD,CACEC,IAAI,SACJC,UAAU,MACVC,MAAM,SACNC,QAAQ,UACRC,WAAW,QACXC,IAAK,CAAEC,KAAM,SAAUC,MAAO,QAASC,SAAU,SACjDC,UAAU,SACVtC,MAAO,CAAEuC,OAAQ,QACbZ,IAIFa,EAAQ,CACZC,OAAQ,CACNC,KAAM,CACJC,OAAQ,SACRC,KAAM,OACNC,OAAQ,QAEVC,OAAQ,CACNC,MAAO,aAmCEC,MA9Bf,WACE,MAAOC,EAAOC,GAAYvC,YAAc,IAAKwC,KAEvChD,EAAWiD,uBACdhD,IACC8C,EAAS9C,EAAEiD,OAAO1D,SAEpB,CAACuD,IAGH,OACE,eAACI,EAAA,EAAD,CAASd,MAAOA,EAAhB,UACE,cAACd,EAAD,+BACA,cAACE,EAAA,EAAD,CAAKM,IAAI,QAAQJ,UAAU,MAAMyB,MAAI,EAACC,SAAU,CAAEC,WAAY,UAA9D,SACE,eAAC7B,EAAA,EAAD,CAAK2B,MAAI,EAACxB,MAAM,SAASC,QAAQ,SAAjC,UACE,cAACJ,EAAA,EAAD,CAAK3B,MAAO,CAAEyD,IAAK,UAAnB,SACE,cAACC,EAAA,EAAD,CACEC,KAAM,cAACC,EAAA,EAAD,IACNC,aAAY,OAAEb,QAAF,IAAEA,SAASc,EACvB5D,SAAUA,EACV6D,YAAY,mBAGhB,cAAC1D,EAAD,CAAaC,KAAI,OAAE0C,QAAF,IAAEA,IAAS,gB,eClDtCgB,IAAS7C,OACP,cAAC,IAAM8C,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAoBC,iBAAkBC,IAAtC,SACE,cAAC,EAAD,UAINC,SAASC,eAAe,W","file":"static/js/main.2f3a1e12.chunk.js","sourcesContent":["import Select from \"react-select\";\n\nimport moment from \"moment-timezone\";\n\nconst allNames = moment.tz.names();\nconst allAbbr = Array.from(\n  new Set(moment.tz.names().map((x) => moment.tz(x).zoneAbbr()))\n);\n\nconst suggestions = allNames.concat(allAbbr).map((x) => ({\n  value: x,\n  label: x,\n}));\n\ninterface SelectTimeZoneParams {\n  tzs: Array<String>;\n  addTZ: (tz: string) => void;\n}\n\nexport const SelectTimeZone: React.FunctionComponent<SelectTimeZoneParams> = ({\n  tzs,\n  addTZ,\n}) => {\n  return (\n    <div style={{ width: \"100%\" }}>\n      <Select\n        key={`select_${tzs.length}`}\n        options={suggestions}\n        onChange={(e) => {\n          addTZ(e?.value!);\n        }}\n      />\n    </div>\n  );\n};\n","import moment from \"moment-timezone\";\nimport { DataTable, Text } from \"grommet\";\nimport { SelectTimeZone } from \"./SelectTimeZone\";\nimport { ArrayParam, useQueryParam, withDefault } from \"use-query-params\";\n\ninterface TimeDisplayProps {\n  time: string | null;\n}\n\nexport const TimeDisplay = ({ time }: TimeDisplayProps) => {\n  let displayList = [\"UTC\", moment.tz.guess()];\n  const [tzs, setTZs] = useQueryParam(\"z\", withDefault(ArrayParam, []));\n\n  return (\n    <>\n      <SelectTimeZone\n        tzs={tzs as string[]}\n        addTZ={(tz) => setTZs([...tzs, tz])}\n      ></SelectTimeZone>\n      <DataTable\n        columns={[\n          {\n            property: \"name\",\n            header: <Text>Name</Text>,\n            primary: true,\n            render: (d) => d,\n          },\n          {\n            property: \"offset\",\n            header: \"Offset\",\n            render: (d) =>\n              time == null\n                ? \"???\"\n                : moment(parseInt(time, 10)).tz(d).format(\"z\"),\n          },\n          {\n            property: \"time\",\n            header: \"Time\",\n            render: (d) => (\n              <span style={{ fontFamily: \"'Roboto Mono', monospace\" }}>\n                {time\n                  ? moment(parseInt(time, 10))\n                      .tz(d)\n                      .format(\"YYYY-MM-DD HH:mm:ss\")\n                  : \"0000-00-00 00:00:00\"}\n              </span>\n            ),\n          },\n        ]}\n        data={displayList.concat(tzs as string[])}\n      />\n    </>\n  );\n};\n","import { Box, Grommet, TextInput } from \"grommet\";\nimport { Clock } from \"grommet-icons\";\nimport { useCallback } from \"react\";\nimport { useQueryParam, StringParam } from \"use-query-params\";\nimport { TimeDisplay } from \"./TimeDisplay\";\n\nconst AppBar = (props: any) => (\n  <Box\n    tag=\"header\"\n    direction=\"row\"\n    align=\"center\"\n    justify=\"between\"\n    background=\"brand\"\n    pad={{ left: \"medium\", right: \"small\", vertical: \"small\" }}\n    elevation=\"medium\"\n    style={{ zIndex: \"1\" }}\n    {...props}\n  />\n);\n\nconst theme = {\n  global: {\n    font: {\n      family: \"Roboto\",\n      size: \"18px\",\n      height: \"20px\",\n    },\n    colors: {\n      focus: \"#0CA7D3\",\n    },\n  },\n};\n\nfunction App() {\n  const [stamp, setStamp] = useQueryParam(\"t\", StringParam);\n\n  const onChange = useCallback(\n    (e) => {\n      setStamp(e.target.value);\n    },\n    [setStamp]\n  );\n\n  return (\n    <Grommet theme={theme}>\n      <AppBar>Pretty Timestamp</AppBar>\n      <Box pad=\"small\" direction=\"row\" flex overflow={{ horizontal: \"hidden\" }}>\n        <Box flex align=\"center\" justify=\"center\">\n          <Box width={{ max: \"medium\" }}>\n            <TextInput\n              icon={<Clock />}\n              defaultValue={stamp ?? undefined}\n              onChange={onChange}\n              placeholder=\"timestamp...\"\n            />\n          </Box>\n          <TimeDisplay time={stamp ?? null} />\n        </Box>\n      </Box>\n    </Grommet>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./page/App\";\nimport { QueryParamProvider } from \"use-query-params\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <QueryParamProvider ReactRouterRoute={Route}>\n        <App />\n      </QueryParamProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}