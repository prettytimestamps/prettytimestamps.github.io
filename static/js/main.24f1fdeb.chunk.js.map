{"version":3,"sources":["page/SelectTimeZone.tsx","services/fuzzyMatch.ts","page/Input.tsx","page/TimeDisplay.tsx","page/App.tsx","services/guessTimestampForm.ts","index.tsx"],"names":["allNames","moment","tz","names","suggestions","Array","from","Set","map","x","zoneAbbr","concat","SelectTimeZone","tzs","addTZ","currentInput","setCurrentInput","useState","suggestionSet","useMemo","fuzzyMatch","search","filter","toUpperCase","indexOf","style","width","TextInput","icon","AddCircle","dropHeight","focusIndicator","onChange","e","currentTarget","value","onSuggestionSelect","suggestion","length","Inputs","guessedTime","stamp","setStamp","setTZs","useCallback","target","Box","flex","direction","max","pad","Text","type","Clock","defaultValue","undefined","placeholder","TimeDisplay","DataTable","columns","property","header","primary","render","d","time","format","fontFamily","data","AppBar","props","tag","align","justify","background","left","right","vertical","elevation","zIndex","theme","global","font","family","size","height","colors","focus","App","useQueryParam","StringParam","withDefault","ArrayParam","guess","timestamp","parsedStamp","parseInt","options","bestOption","now","forEach","option","index","timeToBest","Math","abs","diff","guessTimeStampForm","Grommet","Button","secondary","Github","href","label","overflow","horizontal","ReactDOM","StrictMode","ReactRouterRoute","Route","document","getElementById"],"mappings":"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","file":"static/js/main.24f1fdeb.chunk.js","sourcesContent":["import { TextInput } from \"grommet\";\nimport { AddCircle } from \"grommet-icons\";\n\nimport moment from \"moment-timezone\";\nimport { useMemo, useState } from \"react\";\nimport { fuzzyMatch } from \"../services/fuzzyMatch\";\n\nconst allNames = moment.tz.names();\nconst allAbbr = Array.from(\n  new Set(moment.tz.names().map((x) => moment.tz(x).zoneAbbr()))\n);\n\nconst suggestions = allAbbr.concat(allNames);\n\ninterface SelectTimeZoneParams {\n  tzs: Array<String>;\n  addTZ: (tz: string) => void;\n}\n\nexport const SelectTimeZone: React.FunctionComponent<SelectTimeZoneParams> = ({\n  tzs,\n  addTZ,\n}) => {\n  const [currentInput, setCurrentInput] = useState(\"\");\n  const suggestionSet = useMemo(() => fuzzyMatch(currentInput, suggestions), [\n    currentInput,\n  ]);\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <TextInput\n        icon={<AddCircle />}\n        dropHeight=\"small\"\n        focusIndicator={false}\n        key={`select_${tzs.length}`}\n        suggestions={suggestionSet}\n        onChange={(e) => setCurrentInput(e.currentTarget.value)}\n        onSuggestionSelect={(e) => {\n          addTZ(e.suggestion);\n        }}\n      />\n    </div>\n  );\n};\n","export function fuzzyMatch(search: string, options: string[]): string[] {\n  return options.filter(\n    (x) => x.toUpperCase().indexOf(search.toUpperCase()) >= 0\n  );\n}\n","import { Box, TextInput, Text } from \"grommet\";\nimport { useCallback } from \"react\";\nimport { Guess } from \"../services/guessTimestampForm\";\nimport { SelectTimeZone } from \"./SelectTimeZone\";\nimport { Clock } from \"grommet-icons\";\n\ninterface InputsProps {\n  guessedTime: Guess | null;\n  stamp: string | null;\n  setStamp: (newStamp: string) => void;\n  tzs: string[];\n  setTZs: (newTzs: string[]) => void;\n}\n\nexport const Inputs: React.FunctionComponent<InputsProps> = ({\n  guessedTime,\n  stamp,\n  setStamp,\n  tzs,\n  setTZs,\n}) => {\n  const onChange = useCallback(\n    (e) => {\n      setStamp(e.target.value);\n    },\n    [setStamp]\n  );\n\n  return (\n    <Box flex direction=\"row\">\n      <Box width={{ max: \"medium\" }} pad=\"small\">\n        <TextInput\n          icon={guessedTime ? <Text>{guessedTime.type}</Text> : <Clock />}\n          defaultValue={stamp ?? undefined}\n          onChange={onChange}\n          placeholder=\"timestamp...\"\n        />\n      </Box>\n      <Box width={{ max: \"medium\" }} pad=\"small\">\n        <SelectTimeZone\n          tzs={tzs as string[]}\n          addTZ={(tz) => setTZs([...tzs, tz])}\n        ></SelectTimeZone>\n      </Box>\n    </Box>\n  );\n};\n","import { DataTable, Text } from \"grommet\";\nimport { Guess } from \"../services/guessTimestampForm\";\n\ninterface TimeDisplayProps {\n  guessedTime: Guess | null;\n  tzs: string[];\n}\n\nexport const TimeDisplay = ({ guessedTime, tzs }: TimeDisplayProps) => {\n  return (\n    <>\n      <DataTable\n        columns={[\n          {\n            property: \"name\",\n            header: <Text>Name</Text>,\n            primary: true,\n            render: (d) => d,\n          },\n          {\n            property: \"offset\",\n            header: \"Offset\",\n            render: (d) =>\n              guessedTime == null ? \"???\" : guessedTime.time.tz(d).format(\"Z\"),\n          },\n          {\n            property: \"time\",\n            header: \"Time\",\n            render: (d) => (\n              <span style={{ fontFamily: \"'Roboto Mono', monospace\" }}>\n                {guessedTime\n                  ? guessedTime.time.tz(d).format(\"YYYY-MM-DD HH:mm:ss\")\n                  : \"0000-00-00 00:00:00\"}\n              </span>\n            ),\n          },\n        ]}\n        data={tzs}\n      />\n    </>\n  );\n};\n","import { Box, Grommet, Button } from \"grommet\";\nimport { Github } from \"grommet-icons\";\nimport moment from \"moment\";\nimport { useMemo } from \"react\";\nimport {\n  useQueryParam,\n  StringParam,\n  withDefault,\n  ArrayParam,\n} from \"use-query-params\";\nimport { guessTimeStampForm } from \"../services/guessTimestampForm\";\nimport { Inputs } from \"./Input\";\nimport { TimeDisplay } from \"./TimeDisplay\";\n\nconst AppBar = (props: any) => (\n  <Box\n    tag=\"header\"\n    direction=\"row\"\n    align=\"center\"\n    justify=\"between\"\n    background=\"brand\"\n    pad={{ left: \"medium\", right: \"small\", vertical: \"small\" }}\n    elevation=\"medium\"\n    style={{ zIndex: \"1\" }}\n    {...props}\n  />\n);\n\nconst theme = {\n  global: {\n    font: {\n      family: \"Roboto\",\n      size: \"18px\",\n      height: \"20px\",\n    },\n    colors: {\n      focus: \"#0CA7D3\",\n    },\n  },\n};\n\nfunction App() {\n  const [stamp, setStamp] = useQueryParam(\"t\", StringParam);\n  const [tzs, setTZs] = useQueryParam(\n    \"z\",\n    withDefault(ArrayParam, [\"UTC\", moment.tz.guess()])\n  );\n\n  const guessedTime = useMemo(\n    () => (stamp ? guessTimeStampForm(stamp) : null),\n    [stamp]\n  );\n\n  return (\n    <Grommet theme={theme}>\n      <AppBar>\n        <Box>Pretty Timestamp</Box>\n        <Box>\n          <Button\n            secondary\n            icon={<Github />}\n            target=\"blank\"\n            href=\"https://github.com/prettytimestamps/prettytimestamps.github.io/\"\n            label=\"GitHub\"\n          />\n        </Box>\n      </AppBar>\n      <Box pad=\"small\" direction=\"row\" flex overflow={{ horizontal: \"hidden\" }}>\n        <Box flex align=\"center\" justify=\"center\">\n          <Inputs\n            guessedTime={guessedTime}\n            stamp={stamp || null}\n            setStamp={setStamp}\n            tzs={tzs as string[]}\n            setTZs={setTZs}\n          />\n          <TimeDisplay guessedTime={guessedTime} tzs={tzs as string[]} />\n        </Box>\n      </Box>\n    </Grommet>\n  );\n}\n\nexport default App;\n","import moment from \"moment-timezone\";\n\nexport interface Guess {\n  type: string;\n  time: moment.Moment;\n}\n\nexport const guessTimeStampForm = (timestamp: string) => {\n  const parsedStamp = parseInt(timestamp, 10);\n  const options = [\n    { type: \"s\", time: moment(parsedStamp * 1000) },\n    { type: \"ms\", time: moment(parsedStamp) },\n    { type: \"ns\", time: moment(parsedStamp / 1000) },\n  ];\n\n  let bestOption = options[0];\n  const now = moment();\n  options.forEach((option, index) => {\n    if (index === 0) return;\n\n    const timeToBest = Math.abs(now.diff(bestOption.time));\n    const timeToOption = Math.abs(now.diff(option.time));\n\n    if (timeToOption < timeToBest) {\n      bestOption = option;\n    }\n  });\n  return bestOption;\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./page/App\";\nimport { QueryParamProvider } from \"use-query-params\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <QueryParamProvider ReactRouterRoute={Route}>\n        <App />\n      </QueryParamProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}