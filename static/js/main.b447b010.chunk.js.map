{"version":3,"sources":["TimeDisplay.js","App.js","reportWebVitals.js","index.js"],"names":["TimeDisplay","time","displayList","moment","tz","guess","DataTable","columns","property","header","Text","primary","render","d","style","fontFamily","parseInt","format","data","AppBar","props","Box","tag","direction","align","justify","background","pad","left","right","vertical","elevation","zIndex","theme","global","font","family","size","height","colors","focus","App","stamp","setStamp","useQueryParam","StringParam","onChange","useCallback","e","target","value","Grommet","flex","overflow","horizontal","width","max","TextInput","icon","Clock","defaultValue","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","ReactRouterRoute","Route","document","getElementById"],"mappings":"qPAEO,MAAMA,EAAc,EAAGC,WAC5B,IAAIC,EAAc,CAAC,MAAOC,IAAOC,GAAGC,SAEpC,OACE,cAACC,EAAA,EAAD,CACEC,QAAS,CACP,CACEC,SAAU,OACVC,OAAQ,cAACC,EAAA,EAAD,mBACRC,SAAS,EACTC,OAASC,GAAMA,GAEjB,CACEL,SAAU,UACVC,OAAQ,OACRG,OAASC,GACP,sBAAMC,MAAO,CAAEC,WAAY,4BAA3B,SACGd,EACGE,IAAOa,SAASf,EAAM,KAAKG,GAAGS,GAAGI,OAAO,uBACxC,0BAKZC,KAAMhB,KCpBNiB,EAAUC,GACd,cAACC,EAAA,EAAD,CACEC,IAAI,SACJC,UAAU,MACVC,MAAM,SACNC,QAAQ,UACRC,WAAW,QACXC,IAAK,CAAEC,KAAM,SAAUC,MAAO,QAASC,SAAU,SACjDC,UAAU,SACVjB,MAAO,CAAEkB,OAAQ,QACbZ,IAIFa,EAAQ,CACZC,OAAQ,CACNC,KAAM,CACJC,OAAQ,SACRC,KAAM,OACNC,OAAQ,QAEVC,OAAQ,CACNC,MAAO,aAmCEC,MA9Bf,WACE,MAAOC,EAAOC,GAAYC,YAAc,IAAKC,KAEvCC,EAAWC,uBACdC,IACCL,EAASK,EAAEC,OAAOC,MAAO,aAE3B,CAACP,IAGH,OACE,eAACQ,EAAA,EAAD,CAASlB,MAAOA,EAAhB,UACE,cAACd,EAAD,+BACA,cAACE,EAAA,EAAD,CAAKM,IAAI,QAAQJ,UAAU,MAAM6B,MAAI,EAACC,SAAU,CAAEC,WAAY,UAA9D,SACE,eAACjC,EAAA,EAAD,CAAK+B,MAAI,EAAC5B,MAAM,SAASC,QAAQ,SAAjC,UACE,cAACJ,EAAA,EAAD,CAAKkC,MAAO,CAAEC,IAAK,UAAnB,SACE,cAACC,EAAA,EAAD,CACEC,KAAM,cAACC,EAAA,EAAD,IACNC,aAAclB,EACdI,SAAUA,EACVe,YAAY,mBAGhB,cAAC7D,EAAD,CAAaC,KAAMyC,aC5CdoB,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,EAAGC,SAAQC,SAAQC,SAAQC,SAAQC,cAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eCAdQ,IAAS3D,OACP,cAAC,IAAM4D,WAAP,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAoBC,iBAAkBC,IAAtC,SACE,cAAC,EAAD,UAINC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.b447b010.chunk.js","sourcesContent":["import moment from \"moment-timezone\";\nimport { DataTable, Text } from \"grommet\";\nexport const TimeDisplay = ({ time }) => {\n  let displayList = [\"UTC\", moment.tz.guess()];\n\n  return (\n    <DataTable\n      columns={[\n        {\n          property: \"name\",\n          header: <Text>Name</Text>,\n          primary: true,\n          render: (d) => d,\n        },\n        {\n          property: \"percent\",\n          header: \"Time\",\n          render: (d) => (\n            <span style={{ fontFamily: \"'Roboto Mono', monospace\" }}>\n              {time\n                ? moment(parseInt(time, 10)).tz(d).format(\"YYYY-MM-DD HH:mm:ss\")\n                : \"0000-00-00 00:00:00\"}\n            </span>\n          ),\n        },\n      ]}\n      data={displayList}\n    />\n  );\n};\n","import { Box, Grommet, TextInput } from \"grommet\";\nimport { Clock } from \"grommet-icons\";\nimport { useCallback } from \"react\";\nimport { useQueryParam, StringParam } from \"use-query-params\";\nimport { TimeDisplay } from \"./TimeDisplay\";\n\nconst AppBar = (props) => (\n  <Box\n    tag=\"header\"\n    direction=\"row\"\n    align=\"center\"\n    justify=\"between\"\n    background=\"brand\"\n    pad={{ left: \"medium\", right: \"small\", vertical: \"small\" }}\n    elevation=\"medium\"\n    style={{ zIndex: \"1\" }}\n    {...props}\n  />\n);\n\nconst theme = {\n  global: {\n    font: {\n      family: \"Roboto\",\n      size: \"18px\",\n      height: \"20px\",\n    },\n    colors: {\n      focus: \"#0CA7D3\",\n    },\n  },\n};\n\nfunction App() {\n  const [stamp, setStamp] = useQueryParam(\"t\", StringParam);\n\n  const onChange = useCallback(\n    (e) => {\n      setStamp(e.target.value, \"replace\");\n    },\n    [setStamp]\n  );\n\n  return (\n    <Grommet theme={theme}>\n      <AppBar>Pretty Timestamp</AppBar>\n      <Box pad=\"small\" direction=\"row\" flex overflow={{ horizontal: \"hidden\" }}>\n        <Box flex align=\"center\" justify=\"center\">\n          <Box width={{ max: \"medium\" }}>\n            <TextInput\n              icon={<Clock />}\n              defaultValue={stamp}\n              onChange={onChange}\n              placeholder=\"timestamp...\"\n            />\n          </Box>\n          <TimeDisplay time={stamp} />\n        </Box>\n      </Box>\n    </Grommet>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { QueryParamProvider } from \"use-query-params\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <QueryParamProvider ReactRouterRoute={Route}>\n        <App />\n      </QueryParamProvider>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}